#ifndef _PUT_GET_BIN_
#define _PUT_GET_BIN_

#include <string>
#include <vector>
#include <gsl/gsl_rng.h>
#include "CSampleIDWeight.h"

using namespace std; 

class CPutGetBin					 
{
private:
	int suffix;  
	int id; 
	int nDumpFile;		// total number of samples generated by far 
	int capacityPut; 			// capacity of this bin for put (does not have to be same as capacity for get), we will set capacityPut >= capacityGet;
	int capacityGet; 			// capacity of this bin for get 
	int nPutUsed; 			// available space for put (will be reset as capacityPut after each dump, and will decrease as a sample is depoisited)
	int nGetUsed; 			// available data for get (will be reset as capacityGet after each fetch, and will decrease as a sample is drawn)	
	string filename_prefix; 		// run_id.bin_id.index (index = nSampleGeneratedByFar/capacity); 
	vector <CSampleIDWeight> dataPut; 	// space for put
	vector <CSampleIDWeight> dataGet; 	// data for get 

	string GetFileNameForDump() const; 
	vector <string > GetFileNameForFetch() const; 
	vector <string > GetFileNameForConsolidate() const; 
	bool Dump(string = string()); 			// dump the current materials to file;
	bool Fetch(const gsl_rng*, const vector<string> &); 
 	bool ReadFromOneFile(string, int &, const vector <int> &index);
	vector <CSampleIDWeight> ReadSampleFromFile(string) const;  

	int NumberRecord(string) const; 
	bool LoadLeastWeightSample(string, CSampleIDWeight &) const; 
	bool LoadMostWeightSample(string, CSampleIDWeight &) const; 
public: 
	CPutGetBin(int _id=0, int _nDumpFile=0, int _capacityPut=0, int _capacityGet=0, string _grandPrefix="", int _suffix=0); 
	~CPutGetBin();

	void SetBinID(int _id, int _suffix=0) { id = _id; suffix=_suffix; }
	int GetBinID() const { return id; }

	// void SetNumberSamplesGeneratedByFar(int _nTotalSamples) { nSamplesGeneratedByFar = _nTotalSamples; }
	// int GetNumberSamplesGeneratedByFar() const { return nDumpFile*capacityPut+nPutUsed; }

	void SetCapacity_Put (int);
	int GetCapacity_Put() const { return capacityPut; }
	
	void SetCapacity_Get(int); 
	int GetCapacity_Get() const { return capacityGet; }
	
	int GetNumberFileForFetch() const; 
	int GetNumberFileForDump() const; 
	int GetNumberFileForConsolidate() const; 
	void SetFileNamePrefix(string _grandPrefix) { filename_prefix = _grandPrefix; } 
	string GetFileNamePrefix() const { return filename_prefix;}	

	int DepositSample(const CSampleIDWeight &); 
	int DepositSample(const double *, int, int, double _weight=1.0); 

	bool DrawLeastWeightSample(CSampleIDWeight &) const;  
	bool DrawLeastWeightSample(double *, int, int &, double &) const; 
	bool DrawMostWeightSample(CSampleIDWeight &) const; 
	bool DrawMostWeightSample(double *, int, int &, double &) const; 
	bool DrawSample(const gsl_rng *, CSampleIDWeight &); 
	bool DrawSample(double *, int, int &, double &, const gsl_rng *);  

	void finalize(); 	// save unsaved data
	void consolidate(); 	// conslidate partial sample files into complete sample files
	void restore();	// load data from a partial file
	void RestoreForFetch(); // load data from a partial file but will not update it later. This is used for single-thread mpi version so that for each level it will load partial files for its higher level for ee draw later
	bool empty() const; 

	/* for reassigning samples into different bins */ 
	void DisregardHistorySamples(); 
	void ClearDepositDrawHistory(); 

	/* to get the number of records in this bin */
	int GetTotalNumberRecord() const; 
}; 

#endif
